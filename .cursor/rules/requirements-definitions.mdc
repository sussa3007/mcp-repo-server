---
description: 
globs: 
alwaysApply: true
---

# MCP 프로젝트 요구사항 정의서

## 1. 시스템 개요

### 1.1 목적

- Model Context Protocol(MCP) 관련 서버와 클라이언트 레포지토리를 통합 관리하는 웹 애플리케이션 구축
- MCP 생태계의 다양한 구현체들을 중앙화된 저장소에서 관리 및 검색 기능 제공
- 개발자들이 쉽게 MCP 관련 프로젝트를 탐색하고 정보를 얻을 수 있는 플랫폼 제공

### 1.2 범위

- MCP 서버/클라이언트 레포지토리 관리 시스템
- GitHub 통합 기능
- 사용자 관리 시스템
- 컨텐츠 관리 시스템 (블로그, 사용 사례)

## 2. 기능적 요구사항

### 2.1 레포지토리 관리 시스템

#### 2.1.1 서버 레포지토리 관리

- **목록 조회**
  - 페이지네이션 지원 (기본값: 10개/페이지)
  - 필터링 기능 (언어, 태그, 업데이트 날짜)
  - 정렬 기능 (별표 수, 업데이트 날짜, 이름)
- **상세 정보 표시**
  - 기본 메타데이터 (이름, 설명, 소유자, 저장소 URL)
  - GitHub 통계 (별표, 포크, 라이선스)
  - API 엔드포인트 정보
  - 환경 변수 설정
  - 시스템 요구사항
  - 배포 옵션
  - 데이터베이스 스키마 정보

#### 2.1.2 클라이언트 레포지토리 관리

- **목록 조회**

  - 서버 레포지토리와 동일한 페이지네이션/필터링/정렬 기능
  - 클라이언트 특화 필터 (지원 플랫폼, 프로그래밍 언어)

- **상세 정보 표시**
  - 기본 메타데이터 및 GitHub 통계
  - 설치 가이드
  - 사용 예제
  - 지원 언어 및 플랫폼
  - 기여자 정보

### 2.2 GitHub 통합

#### 2.2.1 레포지토리 연동

- README 파일 자동 동기화
- 파일 구조 탐색
- 메타데이터 자동 업데이트 (별표, 포크, 이슈 등)

#### 2.2.2 인증

- GitHub OAuth 로그인 지원
- Personal Access Token 관리

### 2.3 사용자 관리

#### 2.3.1 인증/인가

- 회원가입
  - 이메일 주소 검증
  - 비밀번호 복잡도 검증
  - 사용자명 중복 확인
- 로그인

  - JWT 기반 인증
  - 소셜 로그인 (GitHub, Google)

- 권한 관리
  - 일반 사용자
  - 시스템 관리자

#### 2.3.2 프로필 관리

- 기본 정보 수정
- 프로필 이미지 관리
- 즐겨찾기 레포지토리 관리
- 제출 이력 관리

### 2.4 컨텐츠 관리

#### 2.4.1 블로그 시스템

- **포스트 관리**

  - 관리자만 작성 및 수정 가능
  - 마크다운 에디터 지원
  - 이미지 업로드
  - 태그 및 카테고리 관리
  - 임시저장 기능

- **조회 기능**
  - 카테고리별 필터링
  - 태그 기반 검색
  - 관련 포스트 추천

#### 2.4.2 사용 사례 관리

- **등록 및 수정**

  - 관리자만 작성 및 수정 가능
  - 상세 설명
  - 스크린샷/이미지
  - 관련 서버/클라이언트 연결
  - 태그 지정

- **조회 기능**
  - 산업별 필터링
  - 구현 기술별 필터링
  - 인기도 기반 정렬

### 2.5 프로젝트 제출 시스템

#### 2.5.1 제출 프로세스

- 기본 정보 입력
- GitHub 레포지토리 url 입력
- 태그 및 카테고리 지정
- 추가 메타데이터 입력
- GitHub 저장소가 Public 권한인지 확인되면 제출

#### 2.5.2 검토 프로세스

- GitHub API 사용하여 레포지토리 정보 불러오기
- Claud 3.7 Sonnet AI & GitHub MCP Tools 이용하여 레포지토리 정보 분석 및 자동 승인 - 문제있다고 판단되면 보류 
- AI가 분석한 정보를 바탕으로 서버에 데이터 저장
- 피드백 전달
- 상태 추적

## 3. 비기능적 요구사항

### 3.1 성능

- 페이지 로드 시간: 2초 이내
- API 응답 시간: 500ms 이내
- 동시 사용자 지원: 최소 1000명

### 3.2 보안

- HTTPS 적용
- XSS 방어
- CSRF 방어
- Rate Limiting 구현
- 입력값 검증
- 민감 정보 암호화

### 3.3 가용성

- 서비스 가용성: 99.9%
- 자동 백업 시스템
- 장애 복구 계획

### 3.4 확장성

- 수평적 확장 가능한 아키텍처
- 캐싱 시스템 적용
- 데이터베이스 샤딩 지원

### 3.5 유지보수성

- 모듈화된 코드 구조
- 상세한 API 문서화
- 로깅 시스템 구축
- 모니터링 시스템 구축

## 4. 기술 스택

### 4.1 프론트엔드

- Next.js 15.2.0 (App Router)
- TypeScript
- React 18.3.1
- Shadcn UI + Radix UI
- TailwindCSS
- React Hook Form + Zod

### 4.2 백엔드

- Spring Boot 3.x
- Java 17+
- Spring Security
- JWT
- Spring Data JPA
- QueryDSL

### 4.3 데이터베이스

- MySql
- Redis (캐싱)

### 4.4 인프라

- Docker
- Kubernetes
- Nginx
- GitHub Actions (CI/CD)

## 5. 시스템 제약사항

### 5.1 기술적 제약

- 모든 API는 RESTful 설계 원칙 준수
- GitHub API 사용량 제한 고려
- 클라우드 네이티브 아키텍처 채택

### 5.2 비즈니스 제약

- 오픈소스 라이선스 준수
- GDPR 및 개인정보보호법 준수
- 접근성 가이드라인 준수

## 6. 확장 계획

### 6.1 Phase 1 (MVP)

- 기본 레포지토리 관리 기능
- GitHub 기본 통합
- 사용자 인증

### 6.2 Phase 2

- 블로그 시스템
- 사용 사례 관리
- 고급 검색 기능

### 6.3 Phase 3

- 분석 대시보드
- API 사용량 모니터링
- 커뮤니티 기능
